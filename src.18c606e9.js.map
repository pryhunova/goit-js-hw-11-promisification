{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAGA,MAAMA,EAAQC,GACLC,QAAQC,QAAQF,GAGnBG,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ;;ACTjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1BZ,QAAQC,QAASU,EAASE,IAAIC,GACjCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,IAK7DZ,EAASa,GAAgBX,QAAQY,MAAMD,GAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACpBnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChB1B,MAAAA,EAAQmB,EAA0B,IAAK,KAEpC,OAAA,IAAIjB,QAAQ,CAACC,EAASwB,KAC/BC,WAAW,KACUN,KAAKE,SAAW,GAGjCrB,EAAQ,CAAE0B,GAAIH,EAAYG,GAAIxB,KAAML,IAEpC2B,EAAO,CAAEE,GAAIH,EAAYG,QAG1B7B,IAIC8B,EAAa,EAAGD,GAAAA,EAAIxB,KAAAA,MACxBC,QAAQC,mBAAmBsB,kBAAmBxB,QAG1C0B,EAAYF,IAChBvB,QAAQ0B,qCAAqCH,+BAa/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH;;ACnDT,aAFA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.18c606e9.js","sourceRoot":"../src","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n  return Promise.resolve(ms);\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback,\n// а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return Promise.resolve( allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n  ),\n  );\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n      \n    if (canProcess) {\n      resolve({ id: transaction.id, time: delay });\n    } else {\n      reject({ id: transaction.id });\n    }\n  });\n  }, delay);\n };\n  \n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError =  id  => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './js/task-1';\nimport './js/task-2';\nimport './js/task-3';\n"]}